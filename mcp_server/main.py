# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:47:42+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header
from pydantic import conint

from models import (
    BadRequestResponse,
    Connection,
    ConnectionImportData,
    Consumer,
    ConsumerRequestCountsInDateRangeResponse,
    CreateConnectionResponse,
    CreateConsumerResponse,
    CreateSessionResponse,
    DeleteConsumerResponse,
    GetConnectionResponse,
    GetConnectionsResponse,
    GetConsumerResponse,
    GetConsumersResponse,
    GetLogsResponse,
    LogsFilter,
    NotFoundResponse,
    PaymentRequiredResponse,
    Scope,
    Session,
    UnauthorizedResponse,
    UnexpectedErrorResponse,
    UnprocessableResponse,
    UpdateConnectionResponse,
    UpdateConsumerRequest,
    UpdateConsumerResponse,
    VaultConnectionsUnifiedApiServiceIdTokenPostRequest,
)

app = MCPProxy(
    contact={'email': 'hello@apideck.com', 'url': 'https://developers.apideck.com'},
    description='Welcome to the Vault API ðŸ‘‹\n\nWhen you\'re looking to connect to an API, the first step is authentication.\n\nVault helps you handle OAuth flows, store API keys, and refresh access tokens from users (called consumers in Apideck).\n\n## Base URL\n\nThe base URL for all API requests is `https://unify.apideck.com`\n\n## Get Started\n\nTo use the Apideck APIs, you need to sign up for free at [https://app.apideck.com/signup](). Follow the steps below to get started.\n\n- [Create a free account.](https://app.apideck.com/signup)\n- Go to the [Dashboard](https://app.apideck.com/unify/unified-apis/dashboard).\n- Get your API key and the application ID.\n- Select and configure the integrations you want to make available to your users. Through the Unify dashboard, you can configure which connectors you want to support as integrations.\n- Retrieve the client_id and client_secret for the integration you want to activate (Only needed for OAuth integrations).\n- Soon, you can skip the previous step and use the Apideck sandbox credentials to get you started instead (upcoming)\n- Register the redirect URI for the example app (https://unify.apideck.com/vault/callback) in the list of redirect URIs under your app\'s settings\n- Use the [publishing guides](/app-listing-requirements) to get your integration listed across app marketplaces.\n\n### Hosted Vault\n\nHosted Vault (vault.apideck.com) is a no-code solution, so you don\'t need to build your own UI to handle the integration settings and authentication.\n\n![Hosted Vault - Integrations portal](https://github.com/apideck-samples/integration-settings/raw/master/public/img/vault.png)\n\nBehind the scenes, Hosted Vault implements the Vault API endpoints and handles the following features for your customers:\n\n- Add a connection\n- Handle the OAuth flow\n- Configure connection settings per integration\n- Manage connections\n- Discover and propose integration options\n- Search for integrations (upcoming)\n- Give integration suggestions based on provided metadata (email or website) when creating the session (upcoming)\n\nTo use Hosted Vault, you will need to first [**create a session**](https://developers.apideck.com/apis/vault/reference#operation/sessionsCreate). This can be achieved by making a POST request to the Vault API to create a valid session for a user, hereafter referred to as the consumer ID.\n\nExample using curl:\n\n```\ncurl -X POST https://unify.apideck.com/vault/sessions\n    -H "Content-Type: application/json"\n    -H "Authorization: Bearer <your-api-key>"\n    -H "X-APIDECK-CONSUMER-ID: <consumer-id>"\n    -H "X-APIDECK-APP-ID: <application-id>"\n    -d \'{"consumer_metadata": { "account_name" : "Sample", "user_name": "Sand Box", "email": "sand@box.com", "image": "https://unavatar.now.sh/jake" }, "theme": { "vault_name": "Intercom", "primary_color": "#286efa", "sidepanel_background_color": "#286efa","sidepanel_text_color": "#FFFFFF", "favicon": "https://res.cloudinary.com/apideck/icons/intercom" }}\'\n```\n\n### Vault API\n\n_Beware, this is strategy takes more time to implement in comparison to Hosted Vault._\n\nIf you are building your integration settings UI manually, you can call the Vault API directly.\n\nThe Vault API is for those who want to completely white label the in-app integrations overview and authentication experience. All the available endpoints are listed below.\n\nThrough the API, your customers authenticate directly in your app, where Vault will still take care of redirecting to the auth provider and back to your app.\n\nIf you\'re already storing access tokens, we will help you migrate through our Vault Migration API (upcoming).\n\n## Domain model\n\nAt its core, a domain model creates a web of interconnected entities.\n\nOur domain model contains five main entity types: Consumer (user, account, team, machine), Application, Connector, Integration, and Connection.\n\n## Connection state\n\nThe connection state is computed based on the connection flow below.\n\n![](https://developers.apideck.com/api-references/vault/connection-flow.png)\n\n## Unify and Proxy integration\n\nThe only thing you need to use the Unify APIs and Proxy is the consumer id; thereafter, Vault will do the look-up in the background to handle the token injection before performing the API call(s).\n\n## Headers\n\nCustom headers that are expected as part of the request. Note that [RFC7230](https://tools.ietf.org/html/rfc7230) states header names are case insensitive.\n\n| Name                  | Type    | Required | Description |\n| --------------------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| x-apideck-app-id      | String  | Yes      | The id of your Unify application. Available at https://app.apideck.com/api-keys. |\n| x-apideck-consumer-id | String  | Yes      | The id of the customer stored inside Apideck Vault. This can be a user id, account id, device id or whatever entity that can have integration within your app. |\n| x-apideck-raw         | Boolean | No       | Include raw response. Mostly used for debugging purposes. |\n\n## Sandbox (upcoming)\n\nThe sandbox is pre-loaded with data similar to a real-life integrations setup. You can use the preconfigured OAauth configured connectors for testing purposes and can skip this step by using the Apideck sandbox credentials to get you started.\n\n## Guides\n\n- [How to build an integrations UI with Vault](https://github.com/apideck-samples/integration-settings)\n- How to configure the OAuth credentials for integration providers (COMING SOON)\n\n## FAQ\n\n**What purpose does Vault serve? Can I just handle the authentication and access token myself?**\nYou can store everything yourself, but that defeats the purpose of using Apideck Unify. Handling tokens for multiple providers can quickly become very complex.\n\n### Is my data secure?\n\nVault employs data minimization, therefore only requesting the minimum amount of scopes needed to perform an API request.\n\n### How do I migrate existing data?\n\nUsing our migration API, you can migrate the access tokens and accounts to Apideck Vault. (COMING SOON)\n\n### Can I use Vault in combination with existing integrations?\n\nYes, you can. The flexibility of Unify allows you to quickly the use cases you need while keeping a gradual migration path based on your timeline and requirements.\n\n### How does Vault work for Apideck Ecosystem customers?\n\nOnce logged in, pick your ecosystem; on the left-hand side of the screen, you\'ll have the option to create an application underneath the Unify section.\n\n### How to integrate Apideck Vault\n\nThis section covers everything you need to know to authenticate your customers through Vault.\nVault provides **three auth strategies** to use API tokens from your customers:\n\n- Vault API\n- Hosted Vault\n- Apideck Ecosystem _(COMING SOON)_\n\nYou can also opt to bypass Vault and still take care of authentication flows yourself. Make sure to put the right safeguards in place to protect your customers\' tokens and other sensitive data.\n\n### What auth types does Vault support?\n\nWhat auth strategies does Vault handle? We currently support three flows so your customers can activate an integration.\n\n#### API keys\n\nFor Services supporting the API key strategy, you can use Hosted Vault will need to provide an in-app form where users can configure their API keys provided by the integration service.\n\n#### OAuth 2.0\n\n##### Authorization Code Grant Type Flow\n\nVault handles the complete Authorization Code Grant Type Flow for you. This flow only supports browser-based (passive) authentication because most identity providers don\'t allow entering a username and password to be entered into applications that they don\'t own.\n\nCertain connectors require an OAuth redirect authentication flow, where the end-user is redirected to the provider\'s website or mobile app to authenticate.\n\nThis is being handled by the `/authorize` endpoint.\n\n#### Basic auth\n\nBasic authentication is a simple authentication scheme built into the HTTP protocol. The required fields to complete basic auth are handled by Hosted Vault or by updating the connection through the Vault API below.\n\n',
    license={
        'name': 'Apache 2.0',
        'url': 'http://www.apache.org/licenses/LICENSE-2.0.html',
    },
    title='Vault API',
    version='9.3.0',
    servers=[{'description': 'Production server', 'url': 'https://unify.apideck.com'}],
)


@app.get(
    '/vault/authorize/{service_id}/{application_id}',
    description=""" __In most cases the authorize link is provided in the ``/connections`` endpoint. Normally you don't need to manually generate these links.__

Use this endpoint to authenticate a user with a connector. It will return a 301 redirect to the downstream connector endpoints.

Auth links will have a state parameter included to verify the validity of the request. This is the url your users will use to activate OAuth supported integration providers.

Vault handles the complete Authorization Code Grant Type Flow for you and will redirect you to the dynamic redirect uri you have appended to the url in case this is missing the default redirect uri you have configured for your Unify application.
 """,
    tags=['api_connection_operations', 'user_session_handling'],
)
def connections_authorize(
    service_id: str,
    application_id: str = ...,
    state: str = ...,
    redirect_uri: str = ...,
    scope: Optional[Scope] = None,
):
    """
    Authorize
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/vault/callback',
    description=""" This endpoint gets called after the triggering the authorize flow.

Callback links need a state and code parameter to verify the validity of the request.
 """,
    tags=['user_session_handling'],
)
def connections_callback(state: str, code: str = ...):
    """
    Callback
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/vault/connections',
    description=""" This endpoint includes all the configured integrations and contains the required assets
to build an integrations page where your users can install integrations.
OAuth2 supported integrations will contain authorize and revoke links to handle the authentication flows.
 """,
    tags=['api_connection_operations', 'consumer_api_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def connections_all(
    x_apideck_consumer_id: str = Header(..., alias='x-apideck-consumer-id'),
    x_apideck_app_id: str = Header(..., alias='x-apideck-app-id'),
    api: Optional[str] = None,
    configured: Optional[bool] = None,
):
    """
    Get all connections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/vault/connections/{unified_api}/{service_id}',
    description=""" Deletes a connection """,
    tags=['api_connection_operations', 'consumer_api_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def connections_delete(
    x_apideck_consumer_id: str = Header(..., alias='x-apideck-consumer-id'),
    x_apideck_app_id: str = Header(..., alias='x-apideck-app-id'),
    service_id: str = ...,
    unified_api: str = ...,
):
    """
    Deletes a connection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/vault/connections/{unified_api}/{service_id}',
    description=""" Get a connection """,
    tags=['api_connection_operations', 'consumer_api_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def connections_one(
    x_apideck_consumer_id: str = Header(..., alias='x-apideck-consumer-id'),
    x_apideck_app_id: str = Header(..., alias='x-apideck-app-id'),
    service_id: str = ...,
    unified_api: str = ...,
):
    """
    Get connection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/vault/connections/{unified_api}/{service_id}',
    description=""" Update a connection """,
    tags=['api_connection_operations', 'consumer_api_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def connections_update(
    x_apideck_consumer_id: str = Header(..., alias='x-apideck-consumer-id'),
    x_apideck_app_id: str = Header(..., alias='x-apideck-app-id'),
    service_id: str = ...,
    unified_api: str = ...,
    body: Connection = ...,
):
    """
    Update connection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/vault/connections/{unified_api}/{service_id}',
    description=""" Create an authorized connection
 """,
    tags=['api_connection_operations', 'consumer_api_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def connections_add(
    x_apideck_consumer_id: str = Header(..., alias='x-apideck-consumer-id'),
    x_apideck_app_id: str = Header(..., alias='x-apideck-app-id'),
    service_id: str = ...,
    unified_api: str = ...,
    body: Connection = ...,
):
    """
    Create connection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/vault/connections/{unified_api}/{service_id}/import',
    description=""" Import an authorized connection.
 """,
    tags=['api_connection_operations', 'consumer_api_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def connections_import(
    x_apideck_consumer_id: str = Header(..., alias='x-apideck-consumer-id'),
    x_apideck_app_id: str = Header(..., alias='x-apideck-app-id'),
    service_id: str = ...,
    unified_api: str = ...,
    body: ConnectionImportData = ...,
):
    """
    Import connection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/vault/connections/{unified_api}/{service_id}/token',
    description=""" Get an access token for a connection and store it in Vault. Currently only supported for connections with the client_credentials OAuth grant type.

Note that the access token will not be returned in the response. A 200 response code indicates a valid access token was stored on the connection.
 """,
    tags=['api_connection_operations', 'consumer_api_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def connections_token(
    x_apideck_consumer_id: str = Header(..., alias='x-apideck-consumer-id'),
    x_apideck_app_id: str = Header(..., alias='x-apideck-app-id'),
    service_id: str = ...,
    unified_api: str = ...,
    body: VaultConnectionsUnifiedApiServiceIdTokenPostRequest = None,
):
    """
    Get Access Token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/vault/connections/{unified_api}/{service_id}/{resource}/config',
    description=""" This endpoint returns custom settings and their defaults required by connection for a given resource.
 """,
    tags=['api_connection_operations', 'consumer_api_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def connection_settings_all(
    x_apideck_consumer_id: str = Header(..., alias='x-apideck-consumer-id'),
    x_apideck_app_id: str = Header(..., alias='x-apideck-app-id'),
    unified_api: str = ...,
    service_id: str = ...,
    resource: str = ...,
):
    """
    Get resource settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/vault/connections/{unified_api}/{service_id}/{resource}/config',
    description=""" Update default values for a connection's resource settings """,
    tags=['api_connection_operations', 'consumer_api_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def connection_settings_update(
    x_apideck_consumer_id: str = Header(..., alias='x-apideck-consumer-id'),
    x_apideck_app_id: str = Header(..., alias='x-apideck-app-id'),
    service_id: str = ...,
    unified_api: str = ...,
    resource: str = ...,
    body: Connection = ...,
):
    """
    Update settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/vault/consumers',
    description=""" This endpoint includes all application consumers, along with an aggregated count of requests made.
 """,
    tags=['consumer_api_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def consumers_all(
    x_apideck_app_id: str = Header(..., alias='x-apideck-app-id'),
    cursor: Optional[str] = None,
    limit: Optional[conint(ge=1, le=200)] = 20,
):
    """
    Get all consumers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/vault/consumers',
    description=""" Create a consumer """,
    tags=['consumer_api_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def consumers_add(
    x_apideck_app_id: str = Header(..., alias='x-apideck-app-id'), body: Consumer = ...
):
    """
    Create consumer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/vault/consumers/{consumer_id}',
    description=""" Delete consumer and all their connections, including credentials. """,
    tags=['api_connection_operations', 'consumer_api_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def consumers_delete(
    x_apideck_app_id: str = Header(..., alias='x-apideck-app-id'),
    consumer_id: str = ...,
):
    """
    Delete consumer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/vault/consumers/{consumer_id}',
    description=""" Consumer detail including their aggregated counts with the connections they have authorized.
 """,
    tags=['consumer_api_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def consumers_one(
    x_apideck_app_id: str = Header(..., alias='x-apideck-app-id'),
    consumer_id: str = ...,
):
    """
    Get consumer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/vault/consumers/{consumer_id}',
    description=""" Update consumer metadata such as name and email. """,
    tags=['api_connection_operations', 'consumer_api_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def consumers_update(
    x_apideck_app_id: str = Header(..., alias='x-apideck-app-id'),
    consumer_id: str = ...,
    body: UpdateConsumerRequest = ...,
):
    """
    Update consumer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/vault/consumers/{consumer_id}/stats',
    description=""" Get consumer request counts within a given datetime range.
 """,
    tags=['consumer_api_operations', 'request_logging_services'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def consumer_request_counts_all(
    x_apideck_app_id: str = Header(..., alias='x-apideck-app-id'),
    consumer_id: str = ...,
    start_datetime: str = ...,
    end_datetime: str = ...,
):
    """
    Consumer request counts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/vault/logs',
    description=""" This endpoint includes all consumer request logs.
 """,
    tags=['consumer_api_operations', 'request_logging_services'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def logs_all(
    x_apideck_app_id: str = Header(..., alias='x-apideck-app-id'),
    x_apideck_consumer_id: str = Header(..., alias='x-apideck-consumer-id'),
    filter: Optional[LogsFilter] = None,
    cursor: Optional[str] = None,
    limit: Optional[conint(ge=1, le=200)] = 20,
):
    """
    Get all consumer request logs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/vault/revoke/{service_id}/{application_id}',
    description=""" __In most cases the authorize link is provided in the ``/connections`` endpoint. Normally you don't need to manually generate these links.__

Use this endpoint to revoke an existing OAuth connector.

Auth links will have a state parameter included to verify the validity of the request. This is the url your users will use to activate OAuth supported integration providers.

Vault handles the complete revoke flow for you and will redirect you to the dynamic redirect uri you have appended to the url in case this is missing the default redirect uri you have configured for your Unify application.
 """,
    tags=['api_connection_operations', 'user_session_handling'],
)
def connections_revoke(
    service_id: str,
    application_id: str = ...,
    state: str = ...,
    redirect_uri: str = ...,
):
    """
    Revoke connection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/vault/sessions',
    description=""" Making a POST request to this endpoint will initiate a Hosted Vault session. Redirect the consumer to the returned
URL to allow temporary access to manage their integrations and settings.

Note: This is a short lived token that will expire after 1 hour (TTL: 3600).
 """,
    tags=['user_session_handling', 'consumer_api_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def sessions_create(
    x_apideck_consumer_id: str = Header(..., alias='x-apideck-consumer-id'),
    x_apideck_app_id: str = Header(..., alias='x-apideck-app-id'),
    body: Session = None,
):
    """
    Create Session
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
