# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:47:42+00:00

from __future__ import annotations

from datetime import datetime as datetime_aliased
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, ConfigDict, Field, RootModel


class ApplicationId(RootModel[str]):
    root: str = Field(
        ...,
        description='ID of your Apideck Application',
        examples=['dSBdXd2H6Mqwfg0atXHXYcysLJE9qyn1VwBtXHX'],
    )


class AuthType(Enum):
    oauth2 = 'oauth2'
    apiKey = 'apiKey'
    basic = 'basic'
    custom = 'custom'
    none = 'none'


class BadRequestResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Bad Request'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid Params'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#requestvalidationerror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[400]
    )
    type_name: Optional[str] = Field(
        None,
        description='The type of error returned',
        examples=['RequestValidationError'],
    )


class Target(Enum):
    custom_fields = 'custom_fields'
    resource = 'resource'


class Status(Enum):
    live = 'live'
    upcoming = 'upcoming'
    requested = 'requested'


class Credentials(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    access_token: Optional[str] = Field(
        None,
        description='Access token',
        examples=['1234567890abcdefghijklmnopqrstuvwxyz'],
    )
    expires_in: Optional[int] = Field(
        None,
        description='The number of seconds until the token expires. If omitted the token will be queued for refresh.',
        examples=[3600],
    )
    issued_at: Optional[datetime_aliased] = Field(
        None,
        description='The datetime at which the token was issued. If omitted the token will be queued for refresh.',
        examples=['2020-01-01T00:00:00Z'],
    )
    refresh_token: str = Field(
        ...,
        description='The refresh token can be used to obtain a new access token.',
        examples=['1234567890abcdefghijklmnopqrstuvwxyz'],
    )


class ConnectionImportData(BaseModel):
    credentials: Optional[Credentials] = Field(
        None,
        examples=[
            {
                'access_token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',
                'refresh_token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.cThIIoDvwdueQB468K5xDc5633seEFoqwxjF_xSJyQQ',
            }
        ],
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Attach your own consumer specific metadata',
        examples=[
            {
                'account': {
                    'id': 'c01458a5-7276-41ce-bc19-639906b0450a',
                    'name': 'My Company',
                },
                'plan': 'enterprise',
            }
        ],
    )
    settings: Optional[Dict[str, Any]] = Field(
        None,
        description='Connection settings. Values will persist to `form_fields` with corresponding id',
        examples=[{'instance_url': 'https://eu28.salesforce.com'}],
    )


class ConnectionMetadata(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None


class ConnectionState(Enum):
    available = 'available'
    callable = 'callable'
    added = 'added'
    authorized = 'authorized'
    invalid = 'invalid'


class DisabledReason(Enum):
    none = 'none'
    retry_limit = 'retry_limit'
    usage_limit = 'usage_limit'


class Event(Enum):
    field_ = '*'
    crm_activity_created = 'crm.activity.created'
    crm_activity_updated = 'crm.activity.updated'
    crm_activity_deleted = 'crm.activity.deleted'
    crm_company_created = 'crm.company.created'
    crm_company_updated = 'crm.company.updated'
    crm_company_deleted = 'crm.company.deleted'
    crm_contact_created = 'crm.contact.created'
    crm_contact_updated = 'crm.contact.updated'
    crm_contact_deleted = 'crm.contact.deleted'
    crm_lead_created = 'crm.lead.created'
    crm_lead_updated = 'crm.lead.updated'
    crm_lead_deleted = 'crm.lead.deleted'
    crm_note_created = 'crm.note.created'
    crm_notes_updated = 'crm.notes.updated'
    crm_notes_deleted = 'crm.notes.deleted'
    crm_opportunity_created = 'crm.opportunity.created'
    crm_opportunity_updated = 'crm.opportunity.updated'
    crm_opportunity_deleted = 'crm.opportunity.deleted'
    lead_lead_created = 'lead.lead.created'
    lead_lead_updated = 'lead.lead.updated'
    lead_lead_deleted = 'lead.lead.deleted'
    vault_connection_created = 'vault.connection.created'
    vault_connection_updated = 'vault.connection.updated'
    vault_connection_disabled = 'vault.connection.disabled'
    vault_connection_deleted = 'vault.connection.deleted'
    vault_connection_callable = 'vault.connection.callable'
    vault_connection_token_refresh_failed = 'vault.connection.token_refresh.failed'
    ats_job_created = 'ats.job.created'
    ats_job_updated = 'ats.job.updated'
    ats_job_deleted = 'ats.job.deleted'
    ats_applicant_created = 'ats.applicant.created'
    ats_applicant_updated = 'ats.applicant.updated'
    ats_applicant_deleted = 'ats.applicant.deleted'
    accounting_customer_created = 'accounting.customer.created'
    accounting_customer_updated = 'accounting.customer.updated'
    accounting_customer_deleted = 'accounting.customer.deleted'
    accounting_invoice_created = 'accounting.invoice.created'
    accounting_invoice_updated = 'accounting.invoice.updated'
    accounting_invoice_deleted = 'accounting.invoice.deleted'
    accounting_invoice_item_created = 'accounting.invoice_item.created'
    accounting_invoice_item_updated = 'accounting.invoice_item.updated'
    accounting_invoice_item_deleted = 'accounting.invoice_item.deleted'
    accounting_ledger_account_created = 'accounting.ledger_account.created'
    accounting_ledger_account_updated = 'accounting.ledger_account.updated'
    accounting_ledger_account_deleted = 'accounting.ledger_account.deleted'
    accounting_tax_rate_created = 'accounting.tax_rate.created'
    accounting_tax_rate_updated = 'accounting.tax_rate.updated'
    accounting_tax_rate_deleted = 'accounting.tax_rate.deleted'
    accounting_bill_created = 'accounting.bill.created'
    accounting_bill_updated = 'accounting.bill.updated'
    accounting_bill_deleted = 'accounting.bill.deleted'
    accounting_payment_created = 'accounting.payment.created'
    accounting_payment_updated = 'accounting.payment.updated'
    accounting_payment_deleted = 'accounting.payment.deleted'
    accounting_supplier_created = 'accounting.supplier.created'
    accounting_supplier_updated = 'accounting.supplier.updated'
    accounting_supplier_deleted = 'accounting.supplier.deleted'
    pos_order_created = 'pos.order.created'
    pos_order_updated = 'pos.order.updated'
    pos_order_deleted = 'pos.order.deleted'
    pos_product_created = 'pos.product.created'
    pos_product_updated = 'pos.product.updated'
    pos_product_deleted = 'pos.product.deleted'
    pos_payment_created = 'pos.payment.created'
    pos_payment_updated = 'pos.payment.updated'
    pos_payment_deleted = 'pos.payment.deleted'
    pos_merchant_created = 'pos.merchant.created'
    pos_merchant_updated = 'pos.merchant.updated'
    pos_merchant_deleted = 'pos.merchant.deleted'
    pos_location_created = 'pos.location.created'
    pos_location_updated = 'pos.location.updated'
    pos_location_deleted = 'pos.location.deleted'
    pos_item_created = 'pos.item.created'
    pos_item_updated = 'pos.item.updated'
    pos_item_deleted = 'pos.item.deleted'
    pos_modifier_created = 'pos.modifier.created'
    pos_modifier_updated = 'pos.modifier.updated'
    pos_modifier_deleted = 'pos.modifier.deleted'
    pos_modifier_group_created = 'pos.modifier-group.created'
    pos_modifier_group_updated = 'pos.modifier-group.updated'
    pos_modifier_group_deleted = 'pos.modifier-group.deleted'
    hris_employee_created = 'hris.employee.created'
    hris_employee_updated = 'hris.employee.updated'
    hris_employee_deleted = 'hris.employee.deleted'
    hris_company_created = 'hris.company.created'
    hris_company_updated = 'hris.company.updated'
    hris_company_deleted = 'hris.company.deleted'
    file_storage_file_created = 'file-storage.file.created'
    file_storage_file_updated = 'file-storage.file.updated'
    file_storage_file_deleted = 'file-storage.file.deleted'
    issue_tracking_ticket_created = 'issue-tracking.ticket.created'
    issue_tracking_ticket_updated = 'issue-tracking.ticket.updated'
    issue_tracking_ticket_deleted = 'issue-tracking.ticket.deleted'


class Status1(Enum):
    enabled = 'enabled'
    disabled = 'disabled'


class State(Enum):
    available = 'available'
    callable = 'callable'
    added = 'added'
    configured = 'configured'
    authorized = 'authorized'


class ConsumerConnection(BaseModel):
    auth_type: Optional[AuthType] = None
    consumer_id: Optional[str] = Field(None, examples=['test_user_id'])
    created_at: Optional[str] = Field(None, examples=['2020-09-19T12:18:37.071Z'])
    enabled: Optional[bool] = Field(None, examples=[True])
    icon: Optional[str] = Field(
        None,
        examples=[
            'https://res.cloudinary.com/apideck/image/upload/v1529456047/catalog/salesforce/icon128x128.png'
        ],
    )
    id: Optional[str] = Field(None, examples=['1111+test_user_id'])
    logo: Optional[str] = Field(
        None,
        examples=[
            'https://c1.sfdcstatic.com/content/dam/web/en_us/www/images/home/logo-salesforce-m.svg'
        ],
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Attach your own consumer specific metadata',
        examples=[
            {
                'account': {
                    'id': 'c01458a5-7276-41ce-bc19-639906b0450a',
                    'name': 'My Company',
                },
                'plan': 'enterprise',
            }
        ],
    )
    name: Optional[str] = Field(None, examples=['Salesforce'])
    service_id: Optional[str] = Field(None, examples=['teamleader'])
    settings: Optional[Dict[str, Any]] = Field(
        None,
        description='Connection settings. Values will persist to `form_fields` with corresponding id',
        examples=[{'instance_url': 'https://eu28.salesforce.com'}],
    )
    state: Optional[State] = Field(None, examples=['authorized'])
    tag_line: Optional[str] = Field(
        None,
        examples=[
            'CRM software solutions and enterprise cloud computing from Salesforce, the leader in customer relationship management (CRM) and PaaS. Free 30 day trial.'
        ],
    )
    unified_api: Optional[str] = Field(None, examples=['crm'])
    updated_at: Optional[str] = Field(None, examples=['2020-09-19T12:18:37.071Z'])
    website: Optional[str] = Field(None, examples=['https://www.salesforce.com'])


class ConsumerId(RootModel[str]):
    root: str = Field(
        ...,
        description="Unique consumer identifier. You can freely choose a consumer ID yourself. Most of the time, this is an ID of your internal data model that represents a user or account in your system (for example account:12345). If the consumer doesn't exist yet, Vault will upsert a consumer based on your ID.",
        examples=['test_consumer_id'],
    )


class ConsumerMetadata(BaseModel):
    account_name: Optional[str] = Field(
        None,
        description='The name of the account as shown in the sidebar.',
        examples=['SpaceX'],
        title='Account name',
    )
    email: Optional[str] = Field(
        None,
        description='The email of the user as shown in the sidebar.',
        examples=['elon@musk.com'],
        title='Email',
    )
    image: Optional[str] = Field(
        None,
        description='The avatar of the user in the sidebar. Must be a valid URL',
        examples=['https://www.spacex.com/static/images/share.jpg'],
        title='Image',
    )
    user_name: Optional[str] = Field(
        None,
        description='The name of the user as shown in the sidebar.',
        examples=['Elon Musk'],
        title='User name',
    )


class Data1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    session_token: str = Field(
        ...,
        examples=[
            'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb25zdW1lcl9pZCI6InRlc3RfdXNlcl9pZCIsImFwcGxpY2F0aW9uX2lkIj'
        ],
    )
    session_uri: str = Field(
        ...,
        examples=[
            'http://vault.apideck.com/session/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb25zdW1lcl9pZCI6InRlc3RfdXNlcl9pZCIsImFwcGxpY2F0aW9uX2lkIj'
        ],
    )


class CreateSessionResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    data: Data1
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class Data2(BaseModel):
    consumer_id: Optional[ConsumerId] = None


class DeleteConsumerResponse(BaseModel):
    data: Data2
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class Type(Enum):
    text = 'text'
    checkbox = 'checkbox'
    tel = 'tel'
    email = 'email'
    url = 'url'
    textarea = 'textarea'
    select = 'select'
    filtered_select = 'filtered-select'
    multi_select = 'multi-select'
    datetime = 'datetime'
    date = 'date'
    time = 'time'
    number = 'number'


class IntegrationState(Enum):
    disabled = 'disabled'
    needs_configuration = 'needs_configuration'
    configured = 'configured'


class Links(BaseModel):
    current: Optional[str] = Field(
        None,
        description='Link to navigate to the current page through the API',
        examples=['https://unify.apideck.com/crm/companies'],
    )
    next: Optional[str] = Field(
        None,
        description='Link to navigate to the previous page through the API',
        examples=[
            'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM'
        ],
    )
    previous: Optional[str] = Field(
        None,
        description='Link to navigate to the previous page through the API',
        examples=[
            'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D'
        ],
    )


class Operation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str = Field(
        ...,
        description='The OpenApi Operation Id associated with the request',
        examples=['connectionsAll'],
    )
    name: str = Field(
        ...,
        description='The OpenApi Operation name associated with the request',
        examples=['Get All Connections'],
    )


class Service(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str = Field(
        ..., description='Apideck service provider id.', examples=['apideck-vault']
    )
    name: str = Field(
        ..., description='Apideck service provider name.', examples=['Apideck Vault']
    )


class UnifiedApi(Enum):
    crm = 'crm'
    lead = 'lead'
    proxy = 'proxy'
    vault = 'vault'
    accounting = 'accounting'
    hris = 'hris'
    ats = 'ats'
    ecommerce = 'ecommerce'
    issue_tracking = 'issue-tracking'
    pos = 'pos'
    file_storage = 'file-storage'
    sms = 'sms'


class Log(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    api_style: str = Field(
        ...,
        description='Indicates if the request was made via REST or Graphql endpoint.',
        examples=['REST'],
    )
    base_url: str = Field(
        ...,
        description='The Apideck base URL the request was made to.',
        examples=['unify.apideck.com'],
    )
    child_request: bool = Field(
        ...,
        description='Indicates whether or not this is a child or parent request.',
        examples=[False],
    )
    consumer_id: str = Field(
        ...,
        description='The consumer Id associated with the request.',
        examples=['test-consumer'],
    )
    duration: float = Field(
        ...,
        description='The entire execution time in milliseconds it took to call the Apideck service provider.',
        examples=[2220.379304],
    )
    error_message: Optional[str] = Field(
        None,
        description='If error occurred, this is brief explanation',
        examples=['Refresh token is invalid'],
    )
    execution: int = Field(
        ...,
        description='The entire execution time in milliseconds it took to make the request.',
        examples=[2248],
    )
    has_children: bool = Field(
        ...,
        description='When request is a parent request, this indicates if there are child requests associated.',
        examples=[False],
    )
    http_method: str = Field(
        ..., description='HTTP Method of request.', examples=['GET']
    )
    id: str = Field(
        ...,
        description='UUID acting as Request Identifier.',
        examples=['0b5f7480-5550-4f5c-a5fc-3c01ac43dd0f'],
    )
    latency: float = Field(
        ...,
        description='Latency added by making this request via Unified Api.',
        examples=[27.620695999999953],
    )
    operation: Operation = Field(
        ..., description='The request as defined in OpenApi Spec.'
    )
    parent_id: str = Field(
        ...,
        description="When request is a child request, this UUID indicates it's parent request.",
        examples=['0b5f7480-5550-4f5c-a5fc-3c01ac43dd0f'],
    )
    path: str = Field(
        ...,
        description='The path component of the URI the request was made to.',
        examples=['/vault/connections'],
    )
    sandbox: bool = Field(
        ...,
        description='Indicates whether the request was made using Apidecks sandbox credentials or not.',
        examples=[False],
    )
    service: Service = Field(
        ..., description='Apideck service provider associated with request.'
    )
    source_ip: Optional[str] = Field(
        None,
        description='The IP address of the source of the request.',
        examples=['94.227.131.238'],
    )
    status_code: int = Field(
        ..., description='HTTP Status code that was returned.', examples=[200]
    )
    success: bool = Field(
        ..., description='Whether or not the request was successful.', examples=[True]
    )
    timestamp: str = Field(
        ...,
        description='ISO Date and time when the request was made.',
        examples=['2021-07-12T14:26:17.420Z'],
    )
    unified_api: UnifiedApi = Field(
        ..., description='Which Unified Api request was made to.', examples=['vault']
    )


class LogsFilter(BaseModel):
    connector_id: Optional[str] = Field(None, examples=['crm+salesforce'])
    exclude_unified_apis: Optional[str] = Field(None, examples=['vault,proxy'])
    status_code: Optional[float] = Field(None, examples=[201])


class Cursors(BaseModel):
    current: Optional[str] = Field(
        None,
        description='Cursor to navigate to the current page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjI='],
    )
    next: Optional[str] = Field(
        None,
        description='Cursor to navigate to the next page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjM='],
    )
    previous: Optional[str] = Field(
        None,
        description='Cursor to navigate to the previous page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjE='],
    )


class Meta(BaseModel):
    cursors: Optional[Cursors] = Field(
        None,
        description='Cursors to navigate to previous or next pages through the API',
    )
    items_on_page: Optional[int] = Field(
        None,
        description='Number of items returned in the data property of the response',
        examples=[50],
    )


class NotFoundResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Not Found'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unknown Widget'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#entitynotfounderror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[404]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['EntityNotFoundError']
    )


class NotImplementedResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Not Implemented'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unmapped Attribute'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#mappingerror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[501]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['MappingError']
    )


class OAuthGrantType(Enum):
    authorization_code = 'authorization_code'
    client_credentials = 'client_credentials'
    password = 'password'


class PaymentRequiredResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=['You have reached your limit of 2000'],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Payment Required'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Request Limit Reached'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#requestlimiterror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[402]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['RequestLimitError']
    )


class ProxyRequest(BaseModel):
    pass


class RequestCountAllocation(BaseModel):
    proxy: Optional[float] = Field(None, examples=[10])
    unify: Optional[float] = Field(None, examples=[100])
    vault: Optional[float] = Field(None, examples=[21])


class AllowAction(Enum):
    delete = 'delete'
    disconnect = 'disconnect'
    reauthorize = 'reauthorize'
    disable = 'disable'


class Theme(BaseModel):
    favicon: Optional[str] = Field(
        None,
        description='The URL to the favicon to use for Vault.',
        examples=['https://res.cloudinary.com/apideck/icons/intercom'],
        title='Favicon',
    )
    logo: Optional[str] = Field(
        None,
        description='The URL to the logo to use for Vault.',
        examples=['https://res.cloudinary.com/apideck/icons/intercom'],
        title='Logo',
    )
    primary_color: Optional[str] = Field(
        None,
        description='The primary color to use for Vault.',
        examples=['#286efa'],
        title='Primary color',
    )
    privacy_url: Optional[str] = Field(
        None,
        description='The URL to the privacy policy that will be shown in the sidebar.',
        examples=['https://compliance.apideck.com/privacy-policy'],
        title='Privacy URL',
    )
    sidepanel_background_color: Optional[str] = Field(
        None,
        description='The background color to use for the sidebar.',
        examples=['#286efa'],
        title='Sidebar background color',
    )
    sidepanel_text_color: Optional[str] = Field(
        None,
        description='The text color to use for the sidebar.',
        examples=['#FFFFFF'],
        title='Sidebar text color',
    )
    terms_url: Optional[str] = Field(
        None,
        description='The URL to the terms and conditions that will be shown in the sidebar.',
        examples=[
            'https://www.termsfeed.com/terms-conditions/957c85c1b089ae9e3219c83eff65377e'
        ],
        title='Terms URL',
    )
    vault_name: Optional[str] = Field(
        None,
        description='The name that will be shown in the sidebar.',
        examples=['Intercom'],
        title='Vault name',
    )


class SimpleFormFieldOption(BaseModel):
    label: Optional[str] = Field(None, examples=['General Channel'])
    value: Optional[Union[str, int, float, bool, List[Union[str, int, float]]]] = None


class UnauthorizedResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=[
            'Failed to generate valid JWT Session. Verify applicationId is correct'
        ],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Unauthorized'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unauthorized Request'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#unauthorizederror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[401]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['UnauthorizedError']
    )


class UnexpectedErrorResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Bad Request'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid Params'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#unauthorizederror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[400]
    )
    type_name: Optional[str] = Field(
        None,
        description='The type of error returned',
        examples=['RequestHeadersValidationError'],
    )


class UnifiedApiId(Enum):
    accounting = 'accounting'
    ats = 'ats'
    calendar = 'calendar'
    crm = 'crm'
    csp = 'csp'
    customer_support = 'customer-support'
    ecommerce = 'ecommerce'
    email = 'email'
    email_marketing = 'email-marketing'
    expense_management = 'expense-management'
    file_storage = 'file-storage'
    form = 'form'
    hris = 'hris'
    lead = 'lead'
    payroll = 'payroll'
    pos = 'pos'
    procurement = 'procurement'
    project_management = 'project-management'
    script = 'script'
    sms = 'sms'
    spreadsheet = 'spreadsheet'
    team_messaging = 'team-messaging'
    issue_tracking = 'issue-tracking'
    time_registration = 'time-registration'
    transactional_email = 'transactional-email'
    vault = 'vault'


class UnprocessableResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=[
            'Unprocessable request, please verify your request headers and body.'
        ],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Unprocessable Entity'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid State'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#invalidstateerror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[422]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['InvalidStateError']
    )


class UpdateConsumerRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    metadata: Optional[ConsumerMetadata] = None


class VaultEventType(Enum):
    field_ = '*'
    vault_connection_created = 'vault.connection.created'
    vault_connection_updated = 'vault.connection.updated'
    vault_connection_disabled = 'vault.connection.disabled'
    vault_connection_deleted = 'vault.connection.deleted'
    vault_connection_callable = 'vault.connection.callable'
    vault_connection_token_refresh_failed = 'vault.connection.token_refresh.failed'


class WebhookSubscription(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    created_at: Optional[str] = Field(
        None,
        description='The date and time the webhook subscription was created downstream',
        examples=['2020-10-01T12:00:00.000Z'],
    )
    downstream_event_types: Optional[List[str]] = Field(
        None,
        description='The list of downstream Events this connection is subscribed to',
    )
    downstream_id: Optional[str] = Field(
        None,
        description='The ID of the downstream service',
        examples=['5f5f5f5f5f5f5f5f5f5f5f5f'],
    )
    execute_url: Optional[str] = Field(
        None,
        description='The URL the downstream is sending to when the event is triggered',
        examples=[
            'https://unify.apideck.com/webhook/w/{lookupIdToken}/{serviceId}?e={downstreamEventType}'
        ],
    )
    unify_event_types: Optional[List[str]] = Field(
        None, description='The list of Unify Events this connection is subscribed to'
    )


class Scope(RootModel[List[str]]):
    root: List[str]


class VaultConnectionsUnifiedApiServiceIdTokenPostRequest(BaseModel):
    pass
    model_config = ConfigDict(
        extra='forbid',
    )


class ConnectionEvent(BaseModel):
    entity: Optional[ConsumerConnection] = None
    entity_id: Optional[str] = Field(
        None,
        description="The service provider's ID of the entity that triggered this event",
        examples=['123456ASDF'],
    )
    entity_type: Optional[str] = Field(
        None,
        description='The type entity that triggered this event',
        examples=['Connection'],
    )
    event_id: Optional[str] = Field(
        None,
        description='Unique reference to this request event',
        examples=['9755c355-56c3-4a2f-a2da-86ff4411fccb'],
    )
    event_type: Optional[VaultEventType] = None
    execution_attempt: Optional[float] = Field(
        None,
        description='The current count this request event has been attempted',
        examples=[2],
    )
    occurred_at: Optional[str] = Field(
        None,
        description='ISO Datetime for when the original event occurred',
        examples=['2021-10-01T03:14:55.419Z'],
    )
    service_id: Optional[str] = Field(
        None, description='Service provider identifier', examples=['close']
    )


class ConnectionWebhook(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    created_at: Optional[datetime_aliased] = Field(
        None,
        description='The date and time when the object was created.',
        examples=['2020-09-30T07:43:32.000Z'],
        title='Created at (timestamp)',
    )
    delivery_url: AnyUrl = Field(
        ...,
        description='The delivery url of the webhook endpoint.',
        examples=['https://example.com/my/webhook/endpoint'],
    )
    description: Optional[str] = Field(
        None,
        description='A description of the object.',
        examples=['A description'],
        title='Description',
    )
    disabled_reason: Optional[DisabledReason] = Field(
        None,
        description="Indicates if the webhook has has been disabled as it reached its retry limit or if account is over the usage allocated by it's plan.",
        examples=['retry_limit'],
    )
    events: List[Event] = Field(
        ...,
        description='The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.',
        examples=[['vault.connection.created', 'vault.connection.updated']],
        title='Subscribed events',
    )
    execute_base_url: AnyUrl = Field(
        ...,
        description='The Unify Base URL events from connectors will be sent to after service id is appended.',
        examples=['https://unify.apideck.com/webhook/webhooks/1234/execute'],
    )
    id: Optional[str] = Field(None, examples=['1234'])
    status: Status1 = Field(
        ..., description='The status of the webhook.', examples=['enabled']
    )
    unified_api: UnifiedApiId
    updated_at: Optional[datetime_aliased] = Field(
        None,
        description='The date and time when the object was last updated.',
        examples=['2020-09-30T07:43:32.000Z'],
        title='Updated at (timestamp)',
    )


class Consumer(BaseModel):
    aggregated_request_count: Optional[float] = Field(None, examples=[101])
    application_id: Optional[str] = Field(
        None,
        description='ID of your Apideck Application',
        examples=['dSBdXd2H6Mqwfg0atXHXYcysLJE9qyn1VwBtXHX'],
    )
    connections: Optional[List[ConsumerConnection]] = None
    consumer_id: ConsumerId
    created: Optional[str] = Field(None, examples=['2021-05-07T12:55:42.242Z'])
    metadata: Optional[ConsumerMetadata] = None
    modified: Optional[str] = Field(None, examples=['2021-05-07T12:55:42.242Z'])
    request_count_updated: Optional[str] = Field(
        None, examples=['2021-05-07T12:55:42.242Z']
    )
    request_counts: Optional[RequestCountAllocation] = None
    services: Optional[List[str]] = Field(None, examples=[['salesforce', 'stripe']])


class Data(BaseModel):
    aggregated_request_count: Optional[float] = Field(None, examples=[40])
    application_id: Optional[str] = Field(None, examples=['1111'])
    consumer_id: Optional[str] = Field(None, examples=['test_user_id'])
    end_datetime: Optional[str] = Field(None, examples=['2021-05-10T12:00:00.000Z'])
    request_counts: Optional[RequestCountAllocation] = None
    start_datetime: Optional[str] = Field(None, examples=['2021-05-01T12:00:00.000Z'])


class ConsumerRequestCountsInDateRangeResponse(BaseModel):
    data: Data
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreateConsumerResponse(BaseModel):
    data: Consumer
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class FormFieldOptionGroup(BaseModel):
    id: Optional[str] = Field(None, examples=['1234'])
    label: Optional[str] = Field(None, examples=['General Channel'])
    options: Optional[List[SimpleFormFieldOption]] = None


class GetConsumerResponse(BaseModel):
    data: Consumer
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class Datum(BaseModel):
    aggregated_request_count: Optional[float] = Field(None, examples=[101])
    application_id: Optional[str] = Field(None, examples=['1111'])
    consumer_id: Optional[str] = Field(None, examples=['test_consumer_id'])
    created: Optional[str] = Field(None, examples=['2021-05-07T12:55:42.242Z'])
    metadata: Optional[ConsumerMetadata] = None
    modified: Optional[str] = Field(None, examples=['2021-05-07T12:55:42.242Z'])
    request_count_updated: Optional[str] = Field(
        None, examples=['2021-05-07T12:55:42.242Z']
    )
    request_counts: Optional[RequestCountAllocation] = None
    services: Optional[List[str]] = Field(None, examples=[['salesforce', 'stripe']])


class GetConsumersResponse(BaseModel):
    data: List[Datum]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetLogsResponse(BaseModel):
    data: List[Log]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class Settings(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allow_actions: Optional[List[AllowAction]] = Field(
        None,
        description='Hide actions from your users in [Vault](/apis/vault/reference#section/Get-Started). Actions in `allow_actions` will be shown on a connection in Vault.\nAvailable actions are: `delete`, `disconnect`, `reauthorize` and `disable`.\nEmpty array will hide all actions. By default all actions are visible.',
        title='Allow actions',
    )
    auto_redirect: Optional[bool] = Field(
        False,
        description='Automatically redirect to redirect uri after the connection has been configured as callable. Defaults to `false`.',
        title='Auto-redirect',
    )
    hide_guides: Optional[bool] = Field(
        False,
        description='Hide Apideck connection guides in [Vault](/apis/vault/reference#section/Get-Started). Defaults to `false`.',
        title='Hide guides',
    )
    hide_resource_settings: Optional[bool] = Field(
        False,
        description='A boolean that controls the display of the configurable resources for an integration. When set to true, the resource configuration options will be hidden and not shown to the user. When set to false, the resource configuration options will be displayed to the user.',
        title='Hide resource settings',
    )
    isolation_mode: Optional[bool] = Field(
        False,
        description='Configure [Vault](/apis/vault/reference#section/Get-Started) to run in isolation mode, meaning it only shows the connection settings and hides the navigation items.',
        title='Isolation mode',
    )
    sandbox_mode: Optional[bool] = Field(
        False,
        description='Configure [Vault](/apis/vault/reference#section/Get-Started) to show a banner informing the logged in user is in a test environment.',
        title='Sandbox mode',
    )
    session_length: Optional[str] = Field(
        '1h',
        description='The duration of time the session is valid for (maximum 1 week).',
        examples=['30m'],
        title='Session Length',
    )
    show_logs: Optional[bool] = Field(
        True,
        description='Configure [Vault](/apis/vault/reference#section/Get-Started) to show the logs page. Defaults to `true`.',
        title='Show logs',
    )
    show_sidebar: Optional[bool] = Field(
        True,
        description='Configure [Vault](/apis/vault/reference#section/Get-Started) to show the sidebar. Defaults to `true`.',
        title='Show sidebar',
    )
    show_suggestions: Optional[bool] = Field(
        False,
        description='Configure [Vault](/apis/vault/reference#section/Get-Started) to show the suggestions page. Defaults to `false`.',
        title='Show suggestions',
    )
    unified_apis: Optional[List[UnifiedApiId]] = Field(
        None,
        description='Provide the IDs of the Unified APIs you want to be visible. Leaving it empty or omitting this field will show all Unified APIs.',
    )


class Session(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    consumer_metadata: Optional[ConsumerMetadata] = None
    custom_consumer_settings: Optional[Dict[str, Any]] = Field(
        None,
        description='Custom consumer settings that are passed as part of the session.',
        examples=[
            {
                'feature_flag_1': True,
                'tax_rates': [{'id': '6', 'label': '6%'}, {'id': '21', 'label': '21%'}],
            }
        ],
        title='Custom consumer settings',
    )
    redirect_uri: Optional[str] = Field(
        None,
        description='The URL to redirect the user to after the session has been configured.',
        examples=['https://mysaas.com/dashboard'],
        title='Redirect URI',
    )
    settings: Optional[Settings] = Field(
        None, description='Settings to change the way the Vault is displayed.'
    )
    theme: Optional[Theme] = Field(
        None, description='Theming options to change the look and feel of Vault.'
    )


class UpdateConsumerResponse(BaseModel):
    data: Consumer
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class FormFieldOption(RootModel[Union[SimpleFormFieldOption, FormFieldOptionGroup]]):
    root: Union[SimpleFormFieldOption, FormFieldOptionGroup]


class Default(BaseModel):
    id: Optional[str] = Field(None, examples=['ProductInterest'])
    options: Optional[List[FormFieldOption]] = None
    target: Optional[Target] = Field(None, examples=['custom_fields'])
    value: Optional[Union[str, int, float, bool, List[Union[str, int, float]]]] = None


class ConfigurationItem(BaseModel):
    defaults: Optional[List[Default]] = None
    resource: Optional[str] = Field(None, examples=['leads'])


class FormField(BaseModel):
    allow_custom_values: Optional[bool] = Field(
        False,
        description='Only applicable to select fields. Allow the user to add a custom value though the option select if the desired value is not in the option select list.',
        examples=[False],
        title='Allow custom values',
    )
    custom_field: Optional[bool] = Field(None, examples=[False])
    description: Optional[str] = Field(
        None,
        description='The description of the form field',
        examples=['Slack channel to push notification to'],
    )
    disabled: Optional[bool] = Field(
        None,
        description='Indicates if the form field is displayed in a “read-only” mode.',
        examples=[False],
    )
    hidden: Optional[bool] = Field(
        None,
        description='Indicates if the form field is not displayed but the value that is being stored on the connection.',
        examples=[False],
    )
    id: Optional[str] = Field(
        None,
        description='The unique identifier of the form field.',
        examples=['channel'],
    )
    label: Optional[str] = Field(
        None, description='The label of the field', examples=['Channel']
    )
    options: Optional[List[FormFieldOption]] = Field(
        None, examples=[[{'label': 'General Channel', 'value': 'general'}]]
    )
    placeholder: Optional[str] = Field(
        None,
        description='The placeholder for the form field',
        examples=['Select a channel'],
    )
    prefix: Optional[str] = Field(
        None,
        description='Prefix to display in front of the form field.',
        examples=['https://'],
    )
    required: Optional[bool] = Field(
        None,
        description='Indicates if the form field is required, which means it must be filled in before the form can be submitted',
        examples=[True],
    )
    sensitive: Optional[bool] = Field(
        None,
        description='Indicates if the form field contains sensitive data, which will display the value as a masked input.',
        examples=[False],
    )
    suffix: Optional[str] = Field(
        None,
        description='Suffix to display next to the form field.',
        examples=['.shopify.com'],
    )
    type: Optional[Type] = Field(None, examples=['select'])


class Connection(BaseModel):
    auth_type: Optional[AuthType] = None
    authorize_url: Optional[str] = Field(
        None,
        description="The OAuth redirect URI. Redirect your users to this URI to let them authorize your app in the connector's UI. Before you can use this URI, you must add `redirect_uri` as a query parameter. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI.",
        examples=[
            'https://unify.apideck.com/vault/authorize/salesforce/<application-id>?state=<state>'
        ],
    )
    configurable_resources: Optional[List[str]] = Field(
        None, examples=[['opportunities', 'companies', 'contacts', 'leads']]
    )
    configuration: Optional[List[ConfigurationItem]] = None
    created_at: Optional[float] = Field(None, examples=[1615563533390])
    enabled: Optional[bool] = Field(
        None,
        description='Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.',
        examples=[True],
    )
    form_fields: Optional[List[FormField]] = Field(
        None,
        description='The settings that are wanted to create a connection.',
        examples=[
            [
                {
                    'custom_field': False,
                    'disabled': False,
                    'id': 'instance_url',
                    'label': 'Instance url',
                    'mask': False,
                    'placeholder': '',
                    'required': True,
                    'sensitive': False,
                    'type': 'text',
                    'value': 'https://eu28.salesforce.com',
                },
                {
                    'custom_field': False,
                    'disabled': False,
                    'id': 'api_key',
                    'label': 'API Key',
                    'mask': False,
                    'placeholder': '',
                    'required': True,
                    'sensitive': True,
                    'type': 'text',
                    'value': '123455677',
                },
            ]
        ],
    )
    has_guide: Optional[bool] = Field(
        None,
        description='Whether the connector has a guide available in the developer docs or not (https://docs.apideck.com/connectors/{service_id}/docs/consumer+connection).',
        examples=[True],
    )
    icon: Optional[str] = Field(
        None,
        description='A visual icon of the connection, that will be shown in the Vault',
        examples=[
            'https://res.cloudinary.com/apideck/image/upload/v1529456047/catalog/salesforce/icon128x128.png'
        ],
    )
    id: Optional[str] = Field(
        None,
        description='The unique identifier of the connection.',
        examples=['crm+salesforce'],
    )
    integration_state: Optional[IntegrationState] = None
    logo: Optional[str] = Field(
        None,
        description='The logo of the connection, that will be shown in the Vault',
        examples=[
            'https://c1.sfdcstatic.com/content/dam/web/en_us/www/images/home/logo-salesforce-m.svg'
        ],
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Attach your own consumer specific metadata',
        examples=[
            {
                'account': {
                    'id': 'c01458a5-7276-41ce-bc19-639906b0450a',
                    'name': 'My Company',
                },
                'plan': 'enterprise',
            }
        ],
    )
    name: Optional[str] = Field(
        None, description='The name of the connection', examples=['Salesforce']
    )
    oauth_grant_type: Optional[OAuthGrantType] = None
    resource_schema_support: Optional[List[str]] = Field(None, examples=[['leads']])
    resource_settings_support: Optional[List[str]] = Field(None, examples=[['leads']])
    revoke_url: Optional[str] = Field(
        None,
        description="The OAuth revoke URI. Redirect your users to this URI to revoke this connection. Before you can use this URI, you must add `redirect_uri` as a query parameter. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI.",
        examples=[
            'https://unify.apideck.com/vault/revoke/salesforce/<application-id>?state=<state>'
        ],
    )
    service_id: Optional[str] = Field(
        None,
        description='The ID of the service this connection belongs to.',
        examples=['salesforce'],
    )
    settings: Optional[Dict[str, Any]] = Field(
        None,
        description='Connection settings. Values will persist to `form_fields` with corresponding id',
        examples=[
            {'api_key': '12345xxxxxx', 'instance_url': 'https://eu28.salesforce.com'}
        ],
    )
    settings_required_for_authorization: Optional[List[str]] = Field(
        None,
        description='List of settings that are required to be configured on integration before authorization can occur',
        examples=[['client_id', 'client_secret']],
    )
    state: Optional[ConnectionState] = None
    status: Optional[Status] = Field(None, description='Status of the connection.')
    subscriptions: Optional[List[WebhookSubscription]] = None
    tag_line: Optional[str] = Field(
        None,
        examples=[
            'CRM software solutions and enterprise cloud computing from Salesforce, the leader in customer relationship management (CRM) and PaaS. Free 30 day trial.'
        ],
    )
    unified_api: Optional[str] = Field(
        None,
        description='The unified API category where the connection belongs to.',
        examples=['crm'],
    )
    updated_at: Optional[float] = Field(None, examples=[1616662325753])
    validation_support: Optional[bool] = None
    website: Optional[str] = Field(
        None,
        description='The website URL of the connection',
        examples=['https://www.salesforce.com'],
    )


class CreateConnectionResponse(BaseModel):
    data: Connection
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[201]
    )


class GetConnectionResponse(BaseModel):
    data: Connection
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetConnectionsResponse(BaseModel):
    data: List[Connection]
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdateConnectionResponse(BaseModel):
    data: Connection
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )
